

see build-all.sh for examples.


## Build
############################################################

the project can build 3 profiles: lowest, latest and eap.

the motivation is to be able to build for different intellij releases without maintaining branches.

lowest build with the lowest version supported, for example 2022.3.1
latest builds for the latest intellij release, for example 2023.1.3
eap build for the EAP version, for example 2023.2

profiles are declared in buildSrc/src/main/kotlin/common/BuildProfile.kt
a profile holds a few properties for the project, mainly platformVersion,riderVersion and more.
data class BuildProfile(
    val profile: BuildProfiles.Profiles,
    val platformVersion: String,
    val riderVersion: String,
    val pycharmVersion: String,
    val riderResharperVersion: String,
    val riderResharperVersionConstant: String,
    val pythonPluginVersion: String,
    val platformVersionCode: String,
    val pluginSinceBuild: String,
    val pluginUntilBuild: String,
    val versionToRunPluginVerifier: String,
    val kotlinTarget: String,
    val javaVersion: String,
)


a profile is activated by a gradle property: buildProfile=[PROFILE]

for example:
./gradlew clean buildPlugin -PbuildProfile=latest
or
./gradlew clean buildPlugin -PbuildProfile=eap

when there is no profile the lowest profile is active.


## How to build
############################################################

If you built the project with lowest profile, and now you want to build with latest its necessary to clean before mainly
because of some leftovers from previous build.
so a workflow could be something like:
you start a branch for some feature, do a clean build. form now on you work as usual. if you now want to
build and test with latest or eap, do a clean build again.



## Intellij version codes:
############################################################

every intellij release has a 3 digits code that is used to identify the major version, its the first 3
digits of the intellij build number, for example for version 2023.2 and build 232.8453.116 the code is 232.

Intellij types:
IC=intellij community
IU=intellij ultimate
PC=pycharm community
PY=pycharm pro
RD=rider


## Build version:
############################################################

the plugin version is in version.properties and is the base plugin version, for example 2.0.90.
the final plugin zip will have a version that includes the intellij release code,
for example: 2.0.90.231, this is the version in plugin.xml.
this code is also used in sinceBuild=232 untilBuild=232.* in plugin.xml.

so 2.0.90.223 can be installed on 2022.3.*
and 2.0.90.231 can be installed on 2023.1.*
and 2.0.90.232 can be installed on 2023.2.*



## Build with specific IDE:
############################################################

besides the profile the build supports building with specific IDE.
usually a plugin can be built with the base platform , in our plugin, ide-common compiles
with the base platform. rider module compiles with rider, python compiles with idea+python plugin.

there are few gradle properties that when set will build the plugin with a specific IDE,
these are:
buildWithRider
buildWIthUltimate
buildWithPycharm
buildWithPycharmPro
if not supplied the default is IC

when supplied then some modules will compile with the supplied IDE, ide-common and the main root module.
this can be used instead of running plugin verifier.

for example:
./gradlew clean buildPlugin -PbuildWIthUltimate=true -PbuildProfile=latest
or
./gradlew clean buildPlugin -PbuildWithRider=true -PbuildProfile=eap



## Loading in Idea:
############################################################

when buildProfile is activated it changes versions only for the build, your project in the IDE still compiles
with the lowest profile.
its possible to load a different platfor version in the IDE.
for example to load the latest version in Idea, add in gradle.properties

buildProfile=latest/eap

that will load the profile dependencies to idea, doing that you can develop with another intellij version.



## Source base and compilation errors:
############################################################

in most cases its possible to build for different intellij versions with the same code base.
in C# code there is an easy solution with DefineConstants , a DefineConstants is injected to
Plugin.props file during build, the constant is per profile and declared in the build profile.

for example:

#if (PROFILE_2022_3)
    public CodeLensAnchorKind DefaultAnchor => CodeLensAnchorKind.Top;
    public ICollection<CodeLensRelativeOrdering> RelativeOrderings => new CodeLensRelativeOrdering[]
        { new CodeLensRelativeOrderingFirst() };
#else
    public CodeVisionAnchorKind DefaultAnchor => CodeVisionAnchorKind.Top;
    public ICollection<CodeVisionRelativeOrdering> RelativeOrderings => new CodeVisionRelativeOrdering[]
        { new CodeVisionRelativeOrderingFirst() };


or
#if (PROFILE_2023_2)
using JetBrains.ReSharper.Feature.Services.Protocol;
#else
using JetBrains.RdBackend.Common.Features;
#endif


in kotlin/java it is probably possible to do things with reflection for different intellij versions.
pr use different source base, or additional source bases.
currently there was no need, but solutions are there.



## Run IDE:
############################################################

there are launchers to run the various IDEs with different version,
and it's also possible to launch an IDE from command line:
see build-all.sh for examples.

for example:
./gradlew clean buildPlugin runIde -PbuildWithRider=true -PbuildProfile=eap
./gradlew clean buildPlugin -PbuildWithPycharm=true -PbuildProfile=eap

if you run for example idea latest and now want to run rider eap a clean is necessary.


## github actions
############################################################

There are github actions that run on push to main and build main branch for different IDE releases.
to download and install for specific IDE find the corresponding workflow and download the zip from there.

the publish workflow runs 3 times when releasing and publishes 3 versions to marketplace.
for example:
2.0.93.223
2.0.93.231
2.0.93.232

the base plugin version is bumped tp 2.0.93.

